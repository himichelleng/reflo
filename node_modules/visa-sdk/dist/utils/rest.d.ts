/// <reference types="node" />
import * as request from 'request';
export interface VisaApiCredentials {
    userId: string;
    password: string;
    certificate: Buffer;
    certificate_passphrase: string;
}
export declare type options = Partial<request.UriOptions & request.CoreOptions>;
export declare function _get<T>(credentials: VisaApiCredentials, uri: string, options?: options): Promise<{
    response: request.Response;
    body: T;
}>;
export declare function _delete<T>(credentials: VisaApiCredentials, uri: string, options?: options): Promise<{
    response: request.Response;
    body: T;
}>;
export declare function _put(credentials: VisaApiCredentials, uri: string, body: any, options?: options): Promise<{
    response: request.Response;
    body: any;
}>;
export declare function _post(credentials: VisaApiCredentials, uri: string, body: any, options?: options): Promise<{
    response: request.Response;
    body: any;
}>;
export declare function _req<T = any>(credentials: VisaApiCredentials, options: request.UriOptions & request.CoreOptions): Promise<{
    response: request.Response;
    body: T;
}>;
//# sourceMappingURL=rest.d.ts.map