"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
const debug_1 = require("debug");
const log = debug_1.default('visa:rest');
function _get(credentials, uri, options) {
    const params = Object.assign({}, options, { uri, method: 'GET' });
    return _req(credentials, params);
}
exports._get = _get;
function _delete(credentials, uri, options) {
    const params = Object.assign({}, options, { uri, method: 'DELETE' });
    return _req(credentials, params);
}
exports._delete = _delete;
function _put(credentials, uri, body, options) {
    const params = Object.assign({}, options, { uri,
        body, method: 'PUT' });
    return _req(credentials, params);
}
exports._put = _put;
function _post(credentials, uri, body, options) {
    const params = Object.assign({}, options, { uri,
        body, method: 'POST' });
    return _req(credentials, params);
}
exports._post = _post;
function _req(credentials, options) {
    return new Promise((resolve, reject) => {
        const defaultOptions = {
            headers: {
                'Authorization': `Basic ${new Buffer(credentials.userId + ':' + credentials.password).toString('base64')}`
            },
            agentOptions: {
                pfx: credentials.certificate,
                passphrase: credentials.certificate_passphrase
            },
            json: true
        };
        defaultObjectProperties(options, defaultOptions);
        log(options);
        request(options, (error, response, body) => {
            if (error)
                return reject(error);
            return resolve({ response, body });
        });
    });
}
exports._req = _req;
function defaultObjectProperties(target, defaults) {
    for (const [key, value] of Object.entries(defaults)) {
        if (!target[key]) {
            target[key] = value;
            continue;
        }
        ;
        defaultObjectProperties(target[key], defaults[key]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9yZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsbUNBQW1DO0FBRW5DLGlDQUEwQjtBQUMxQixNQUFNLEdBQUcsR0FBRyxlQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7QUFXL0IsU0FBZ0IsSUFBSSxDQUFJLFdBQStCLEVBQUUsR0FBVyxFQUFFLE9BQWlCO0lBQ25GLE1BQU0sTUFBTSxxQkFDTCxPQUFPLElBQ1YsR0FBRyxFQUNILE1BQU0sRUFBRSxLQUFLLEdBQ2hCLENBQUM7SUFDRixPQUFPLElBQUksQ0FBSSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQVBELG9CQU9DO0FBRUQsU0FBZ0IsT0FBTyxDQUFJLFdBQStCLEVBQUUsR0FBVyxFQUFFLE9BQWlCO0lBQ3RGLE1BQU0sTUFBTSxxQkFDTCxPQUFPLElBQ1YsR0FBRyxFQUNILE1BQU0sRUFBRSxRQUFRLEdBQ25CLENBQUM7SUFDRixPQUFPLElBQUksQ0FBSSxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQVBELDBCQU9DO0FBRUQsU0FBZ0IsSUFBSSxDQUFDLFdBQStCLEVBQUUsR0FBVyxFQUFFLElBQVMsRUFBRSxPQUFpQjtJQUMzRixNQUFNLE1BQU0scUJBQ0wsT0FBTyxJQUNWLEdBQUc7UUFDSCxJQUFJLEVBQ0osTUFBTSxFQUFFLEtBQUssR0FDaEIsQ0FBQztJQUNGLE9BQU8sSUFBSSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNyQyxDQUFDO0FBUkQsb0JBUUM7QUFFRCxTQUFnQixLQUFLLENBQUMsV0FBK0IsRUFBRSxHQUFXLEVBQUUsSUFBUyxFQUFFLE9BQWlCO0lBQzVGLE1BQU0sTUFBTSxxQkFDTCxPQUFPLElBQ1YsR0FBRztRQUNILElBQUksRUFDSixNQUFNLEVBQUUsTUFBTSxHQUNqQixDQUFDO0lBQ0YsT0FBTyxJQUFJLENBQUMsV0FBVyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3JDLENBQUM7QUFSRCxzQkFRQztBQUVELFNBQWdCLElBQUksQ0FBVSxXQUErQixFQUFFLE9BQWlEO0lBQzVHLE9BQU8sSUFBSSxPQUFPLENBQTBDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQzVFLE1BQU0sY0FBYyxHQUFHO1lBQ25CLE9BQU8sRUFBRTtnQkFDTCxlQUFlLEVBQUUsU0FBUyxJQUFJLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFO2FBQzdHO1lBQ0QsWUFBWSxFQUFFO2dCQUNWLEdBQUcsRUFBRSxXQUFXLENBQUMsV0FBVztnQkFDNUIsVUFBVSxFQUFFLFdBQVcsQ0FBQyxzQkFBc0I7YUFDakQ7WUFDRCxJQUFJLEVBQUUsSUFBSTtTQUNiLENBQUM7UUFDRix1QkFBdUIsQ0FBQyxPQUFPLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDakQsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2IsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDdkMsSUFBSSxLQUFLO2dCQUFFLE9BQU8sTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sT0FBTyxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFuQkQsb0JBbUJDO0FBR0QsU0FBUyx1QkFBdUIsQ0FBSSxNQUFTLEVBQUUsUUFBb0I7SUFDL0QsS0FBSyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDakQsSUFBSSxDQUFPLE1BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNmLE1BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7WUFDM0IsU0FBUztTQUNaO1FBQUEsQ0FBQztRQUNGLHVCQUF1QixDQUFPLE1BQU8sQ0FBQyxHQUFHLENBQUMsRUFBUSxRQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNyRTtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyByZXF1ZXN0IGZyb20gJ3JlcXVlc3QnO1xuXG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuY29uc3QgbG9nID0gZGVidWcoJ3Zpc2E6cmVzdCcpO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZpc2FBcGlDcmVkZW50aWFscyB7XG4gICAgdXNlcklkOiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbiAgICBjZXJ0aWZpY2F0ZTogQnVmZmVyO1xuICAgIGNlcnRpZmljYXRlX3Bhc3NwaHJhc2U6IHN0cmluZztcbn1cblxuZXhwb3J0IHR5cGUgb3B0aW9ucyA9IFBhcnRpYWw8cmVxdWVzdC5VcmlPcHRpb25zICYgcmVxdWVzdC5Db3JlT3B0aW9ucz47XG5cbmV4cG9ydCBmdW5jdGlvbiBfZ2V0PFQ+KGNyZWRlbnRpYWxzOiBWaXNhQXBpQ3JlZGVudGlhbHMsIHVyaTogc3RyaW5nLCBvcHRpb25zPzogb3B0aW9ucykge1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdXJpLFxuICAgICAgICBtZXRob2Q6ICdHRVQnXG4gICAgfTtcbiAgICByZXR1cm4gX3JlcTxUPihjcmVkZW50aWFscywgcGFyYW1zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9kZWxldGU8VD4oY3JlZGVudGlhbHM6IFZpc2FBcGlDcmVkZW50aWFscywgdXJpOiBzdHJpbmcsIG9wdGlvbnM/OiBvcHRpb25zKSB7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB1cmksXG4gICAgICAgIG1ldGhvZDogJ0RFTEVURSdcbiAgICB9O1xuICAgIHJldHVybiBfcmVxPFQ+KGNyZWRlbnRpYWxzLCBwYXJhbXMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX3B1dChjcmVkZW50aWFsczogVmlzYUFwaUNyZWRlbnRpYWxzLCB1cmk6IHN0cmluZywgYm9keTogYW55LCBvcHRpb25zPzogb3B0aW9ucykge1xuICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdXJpLFxuICAgICAgICBib2R5LFxuICAgICAgICBtZXRob2Q6ICdQVVQnXG4gICAgfTtcbiAgICByZXR1cm4gX3JlcShjcmVkZW50aWFscywgcGFyYW1zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9wb3N0KGNyZWRlbnRpYWxzOiBWaXNhQXBpQ3JlZGVudGlhbHMsIHVyaTogc3RyaW5nLCBib2R5OiBhbnksIG9wdGlvbnM/OiBvcHRpb25zKSB7XG4gICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB1cmksXG4gICAgICAgIGJvZHksXG4gICAgICAgIG1ldGhvZDogJ1BPU1QnXG4gICAgfTtcbiAgICByZXR1cm4gX3JlcShjcmVkZW50aWFscywgcGFyYW1zKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9yZXE8VCA9IGFueT4oY3JlZGVudGlhbHM6IFZpc2FBcGlDcmVkZW50aWFscywgb3B0aW9uczogcmVxdWVzdC5VcmlPcHRpb25zICYgcmVxdWVzdC5Db3JlT3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx7IHJlc3BvbnNlOiByZXF1ZXN0LlJlc3BvbnNlLCBib2R5OiBUIH0+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmFzaWMgJHtuZXcgQnVmZmVyKGNyZWRlbnRpYWxzLnVzZXJJZCArICc6JyArIGNyZWRlbnRpYWxzLnBhc3N3b3JkKS50b1N0cmluZygnYmFzZTY0Jyl9YFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFnZW50T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHBmeDogY3JlZGVudGlhbHMuY2VydGlmaWNhdGUsXG4gICAgICAgICAgICAgICAgcGFzc3BocmFzZTogY3JlZGVudGlhbHMuY2VydGlmaWNhdGVfcGFzc3BocmFzZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGpzb246IHRydWVcbiAgICAgICAgfTtcbiAgICAgICAgZGVmYXVsdE9iamVjdFByb3BlcnRpZXMob3B0aW9ucywgZGVmYXVsdE9wdGlvbnMpO1xuICAgICAgICBsb2cob3B0aW9ucyk7XG4gICAgICAgIHJlcXVlc3Qob3B0aW9ucywgKGVycm9yLCByZXNwb25zZSwgYm9keSkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycm9yKSByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHsgcmVzcG9uc2UsIGJvZHkgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG4vLyBHZW5lcmljYWxseSBkZWZhdWx0cyBwcm9wZXJ0aWVzIG9mICd0YXJnZXQnIHRvIHZhbHVlcyBvZiAnZGVmYXVsdHMnXG5mdW5jdGlvbiBkZWZhdWx0T2JqZWN0UHJvcGVydGllczxUPih0YXJnZXQ6IFQsIGRlZmF1bHRzOiBQYXJ0aWFsPFQ+KTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGVmYXVsdHMpKSB7XG4gICAgICAgIGlmICghKDxhbnk+dGFyZ2V0KVtrZXldKSB7XG4gICAgICAgICAgICAoPGFueT50YXJnZXQpW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9O1xuICAgICAgICBkZWZhdWx0T2JqZWN0UHJvcGVydGllcygoPGFueT50YXJnZXQpW2tleV0sICg8YW55PmRlZmF1bHRzKVtrZXldKTtcbiAgICB9XG59IFxuIl19