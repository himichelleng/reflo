import { Visa } from './Visa';
export declare class B2B extends Visa {
    getBank(bankId: string): Promise<{
        response: import("request").Response;
        body: {};
    }>;
    getBankNetPosition(bankId: string, date?: string): Promise<{
        response: import("request").Response;
        body: {};
    }>;
    getCompanies(bankId: string, keyword?: string): Promise<{
        response: import("request").Response;
        body: {};
    }>;
    addCompany(parameters: B2B.CompanyAddBody): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    editCompany(enterpriseId: string, parameters: B2B.CompanyEditPutBody): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    makePayment(parameters: B2B.PaymentParameters): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    getEffectiveConversionRate(sourceCurrencyISOCode: string, targetCurrencyISOCode: string, effectiveDate?: string): Promise<{
        response: import("request").Response;
        body: {};
    }>;
    searchPayment(bankId: string, searchType: 'I' | 'O', keyword: string, toDate?: string, fromDate?: string): Promise<{
        response: import("request").Response;
        body: {};
    }>;
}
export declare namespace B2B {
    interface CompanyAddBody {
        bankId: string;
        companyId: string;
        transactionLimits?: {
            customLimits: boolean;
            singleTransaction: string;
            dailyVolume: string;
        };
        blockedCorridors?: {
            blockedCountries?: {
                blockedDesc: string;
                isoCountryCode: number;
            }[];
        };
        companyProfile: {
            defaultCurrencyIsoCode: number;
            doingBusinessAs: string;
            industryCode: string;
            businessRegistrationNumber: string;
            bankAccountNumber: string;
            bankRoutingNumber: string;
            iban: string;
            clabe: string;
            chipsUid: string;
            swiftLEI: string;
            taxId: string;
            corporateLegalName: string;
            address: {
                line1: string;
                unitNo: string;
                city: string;
                state: string;
                zipCode: string;
                countryDisplayName: string;
                countryIsoCode: number;
            };
            primaryContact: {
                name: string;
                jobTitle: string;
                email: string;
                phone: string;
            };
            secondaryContact: {
                name: string;
                jobTitle: string;
                email: string;
                phone: string;
            };
            authorizedSignatory: {
                fullName: string;
                nationalityCountryCodeISO: number;
                countryOfResidenceCodeISO: string;
            };
            ownershipDetails: {
                fullName: string;
                entityName: string;
                address: string;
                email: string;
                entityOwner: string;
                nationalityCountryCode: string;
                countryOfResidence: string;
                nationalityCountryCodeISO: string;
                countryOfResidenceISO: number;
                isIndividual: boolean;
                isActive: boolean;
                ownerIndividuals: any;
            };
            remitProfile: {
                deliveryMethod: string;
                attachmentFormat: string;
                frequency: string;
                email: string;
            };
            reconcileProfile: {
                deliveryMethod: string;
                attachmentFormat: string;
                frequency: string;
                email: string;
            };
        };
    }
    type CompanyEditPutBody = any;
    interface PaymentParameters {
        senderEnterpriseId: string;
        receiverEnterpriseId: string;
        receiverBic: number;
        senderBic: number;
        invoiceDetails: {
            invoiceNumber: string;
            poNumber: string;
            paymentAmount: number;
            paymentCurrencyIsoCode: number;
            notes: string;
            partialPayment: boolean;
        }[];
    }
}
//# sourceMappingURL=B2B.d.ts.map