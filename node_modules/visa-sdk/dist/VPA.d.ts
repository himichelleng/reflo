import { Visa } from './Visa';
export declare class VPA extends Visa {
    virtualCardRequisition(requisition: VPA.VirtualCardRequisition): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    managePaymentControls(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    listPaymentControl(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    getAccountStatus(query: VPA.AccountStatusQuery): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    getSecurityCode(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    requestVirtualAccount(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    SUAGetAccountStatus(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    manageProxy(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    processPayments(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    resendPayment(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    getPaymentUrl(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    getPaymentDetails(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    cancelPayment(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    createSupplier(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    updateSupplier(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    disableSupplier(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    getSupplier(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
    manageSupplierAccount(parameters: any): Promise<{
        response: import("request").Response;
        body: any;
    }>;
}
export declare namespace VPA {
    interface VirtualCardRequisition {
        accountNumber: number;
        proxyPoolId: string;
        messageId: string;
        buyerId: number;
        requisitionDetails: {
            startDate?: string;
            endDate?: string;
            timeZone?: string;
            rules?: {
                ruleCode?: string;
                overrides?: {
                    overrideCode?: string;
                    overrideValue?: number;
                    sequence?: number;
                }[];
            }[];
        }[];
        employee: {
            eMailId?: string;
            employeeId?: string;
            companyAdminEMailId?: string;
            lastName?: string;
            firstName?: string;
            costCenter?: string;
            GL?: string;
            address?: {
                city?: string;
                countryCode?: string;
                state?: string;
                addressline1?: string;
                addressline2?: string;
                postalCode?: string;
            };
        };
        clientId: string;
        optionalField1?: string;
        optionalField2?: string;
        optionalField3?: string;
        optionalField4?: string;
        optionalField5?: string;
    }
    interface AccountStatusQuery {
        buyerId: number;
        accountRequestId: number;
        supplierId: string;
        clientId: string;
        messageId: string;
    }
}
//# sourceMappingURL=VPA.d.ts.map