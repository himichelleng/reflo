"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Visa_1 = require("./Visa");
class B2B extends Visa_1.Visa {
    getBank(bankId) {
        return this.get(`/visab2bconnect/v1/banks/${bankId}`);
    }
    getBankNetPosition(bankId, date) {
        const options = { qs: { bankId, date } };
        return this.get(`/visab2bconnect/v1/banks/netPosition`, options);
    }
    getCompanies(bankId, keyword) {
        const options = { qs: { bankId, keyword } };
        return this.get(`/visab2bconnect/v1/companies/banks`, options);
    }
    addCompany(parameters) {
        return this.post(`/visab2bconnect/v1/companies`, parameters);
    }
    editCompany(enterpriseId, parameters) {
        return this.put(`/visab2bconnect/v1/companies/${enterpriseId}`, parameters);
    }
    makePayment(parameters) {
        return this.post(`/visab2bconnect/v1/payments`, parameters);
    }
    getEffectiveConversionRate(sourceCurrencyISOCode, targetCurrencyISOCode, effectiveDate) {
        const options = { qs: { sourceCurrencyISOCode, targetCurrencyISOCode, effectiveDate } };
        return this.get(`/visab2bconnect/v1/companies/banks`, options);
    }
    searchPayment(bankId, searchType, keyword, toDate, fromDate) {
        const options = { qs: { toDate, fromDate } };
        return this.get(`/visab2bconnect/v1/payments/bankId/${bankId}/searchType/${searchType}/keyword/${keyword}`, options);
    }
}
exports.B2B = B2B;
//# sourceMappingURL=data:application/json;base64,