"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const rest = require("./utils/rest");
var Endpoint;
(function (Endpoint) {
    Endpoint["Sandbox"] = "https://sandbox.api.visa.com";
    Endpoint["Certification"] = "https://cert.api.visa.com";
    Endpoint["Production"] = "https://api.visa.com";
})(Endpoint = exports.Endpoint || (exports.Endpoint = {}));
class Visa {
    constructor({ userId, password, certificate_passphrase, certificate_file_path }, host = Endpoint.Sandbox) {
        const certificate = fs.readFileSync(certificate_file_path);
        this._host = host;
        this._credentials = {
            userId,
            certificate,
            password,
            certificate_passphrase
        };
    }
    get(uri, options) {
        return rest._get(this._credentials, `${this._host}${uri}`, options);
    }
    delete(uri, options) {
        return rest._delete(this._credentials, `${this._host}${uri}`, options);
    }
    put(uri, body, options) {
        return rest._put(this._credentials, `${this._host}${uri}`, body, options);
    }
    post(uri, body, options) {
        return rest._post(this._credentials, `${this._host}${uri}`, body, options);
    }
    helloWorld() {
        return this.get(`/vdp/helloworld`);
    }
}
exports.Visa = Visa;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmlzYS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9WaXNhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUJBQXlCO0FBQ3pCLHFDQUFxQztBQVNyQyxJQUFZLFFBSVg7QUFKRCxXQUFZLFFBQVE7SUFDaEIsb0RBQXdDLENBQUE7SUFDeEMsdURBQTJDLENBQUE7SUFDM0MsK0NBQW1DLENBQUE7QUFDdkMsQ0FBQyxFQUpXLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBSW5CO0FBRUQsTUFBYSxJQUFJO0lBR2IsWUFBWSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsc0JBQXNCLEVBQUUscUJBQXFCLEVBQXNCLEVBQUUsSUFBSSxHQUFHLFFBQVEsQ0FBQyxPQUFPO1FBQ3hILE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsWUFBWSxHQUFHO1lBQ2hCLE1BQU07WUFDTixXQUFXO1lBQ1gsUUFBUTtZQUNSLHNCQUFzQjtTQUN6QixDQUFDO0lBQ04sQ0FBQztJQUNTLEdBQUcsQ0FBQyxHQUFXLEVBQUUsT0FBc0I7UUFDN0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3ZFLENBQUM7SUFDUyxNQUFNLENBQUMsR0FBVyxFQUFFLE9BQXNCO1FBQ2hELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUMxRSxDQUFDO0lBQ1MsR0FBRyxDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsT0FBc0I7UUFDeEQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUM3RSxDQUFDO0lBQ1MsSUFBSSxDQUFDLEdBQVcsRUFBRSxJQUFTLEVBQUUsT0FBc0I7UUFDekQsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUM5RSxDQUFDO0lBRU0sVUFBVTtRQUNiLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7Q0FDSjtBQTdCRCxvQkE2QkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5pbXBvcnQgKiBhcyByZXN0IGZyb20gJy4vdXRpbHMvcmVzdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmlzYUFwaUNyZWRlbnRpYWxzIHtcbiAgICB1c2VySWQ6IHN0cmluZztcbiAgICBwYXNzd29yZDogc3RyaW5nO1xuICAgIGNlcnRpZmljYXRlX2ZpbGVfcGF0aDogc3RyaW5nO1xuICAgIGNlcnRpZmljYXRlX3Bhc3NwaHJhc2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGVudW0gRW5kcG9pbnQge1xuICAgIFNhbmRib3ggPSAnaHR0cHM6Ly9zYW5kYm94LmFwaS52aXNhLmNvbScsXG4gICAgQ2VydGlmaWNhdGlvbiA9ICdodHRwczovL2NlcnQuYXBpLnZpc2EuY29tJyxcbiAgICBQcm9kdWN0aW9uID0gJ2h0dHBzOi8vYXBpLnZpc2EuY29tJyxcbn1cblxuZXhwb3J0IGNsYXNzIFZpc2Ege1xuICAgIHByaXZhdGUgX2NyZWRlbnRpYWxzOiByZXN0LlZpc2FBcGlDcmVkZW50aWFscztcbiAgICBwcml2YXRlIF9ob3N0OiBFbmRwb2ludDtcbiAgICBjb25zdHJ1Y3Rvcih7IHVzZXJJZCwgcGFzc3dvcmQsIGNlcnRpZmljYXRlX3Bhc3NwaHJhc2UsIGNlcnRpZmljYXRlX2ZpbGVfcGF0aCB9OiBWaXNhQXBpQ3JlZGVudGlhbHMsIGhvc3QgPSBFbmRwb2ludC5TYW5kYm94KSB7XG4gICAgICAgIGNvbnN0IGNlcnRpZmljYXRlID0gZnMucmVhZEZpbGVTeW5jKGNlcnRpZmljYXRlX2ZpbGVfcGF0aCk7XG4gICAgICAgIHRoaXMuX2hvc3QgPSBob3N0O1xuICAgICAgICB0aGlzLl9jcmVkZW50aWFscyA9IHtcbiAgICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICAgIGNlcnRpZmljYXRlLFxuICAgICAgICAgICAgcGFzc3dvcmQsXG4gICAgICAgICAgICBjZXJ0aWZpY2F0ZV9wYXNzcGhyYXNlXG4gICAgICAgIH07XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXQodXJpOiBzdHJpbmcsIG9wdGlvbnM/OiByZXN0Lm9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHJlc3QuX2dldCh0aGlzLl9jcmVkZW50aWFscywgYCR7dGhpcy5faG9zdH0ke3VyaX1gLCBvcHRpb25zKVxuICAgIH1cbiAgICBwcm90ZWN0ZWQgZGVsZXRlKHVyaTogc3RyaW5nLCBvcHRpb25zPzogcmVzdC5vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiByZXN0Ll9kZWxldGUodGhpcy5fY3JlZGVudGlhbHMsIGAke3RoaXMuX2hvc3R9JHt1cml9YCwgb3B0aW9ucylcbiAgICB9XG4gICAgcHJvdGVjdGVkIHB1dCh1cmk6IHN0cmluZywgYm9keTogYW55LCBvcHRpb25zPzogcmVzdC5vcHRpb25zKSB7XG4gICAgICAgIHJldHVybiByZXN0Ll9wdXQodGhpcy5fY3JlZGVudGlhbHMsIGAke3RoaXMuX2hvc3R9JHt1cml9YCwgYm9keSwgb3B0aW9ucylcbiAgICB9XG4gICAgcHJvdGVjdGVkIHBvc3QodXJpOiBzdHJpbmcsIGJvZHk6IGFueSwgb3B0aW9ucz86IHJlc3Qub3B0aW9ucykge1xuICAgICAgICByZXR1cm4gcmVzdC5fcG9zdCh0aGlzLl9jcmVkZW50aWFscywgYCR7dGhpcy5faG9zdH0ke3VyaX1gLCBib2R5LCBvcHRpb25zKVxuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgaGVsbG9Xb3JsZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KGAvdmRwL2hlbGxvd29ybGRgKTtcbiAgICB9XG59IFxuIl19